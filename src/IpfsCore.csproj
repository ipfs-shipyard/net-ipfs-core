<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;</TargetFrameworks>
        <AssemblyName>IpfsShipyard.Ipfs.Core</AssemblyName>
        <RootNamespace>Ipfs</RootNamespace>
        <DebugType>portable</DebugType>
        <LangVersion>12.0</LangVersion>

        <!-- https://semver.org/spec/v2.0.0.html -->
        <Version>0.7.0</Version>
        <AssemblyVersion>$(Version)</AssemblyVersion>

        <!-- Nuget specs -->
        <PackageId>IpfsShipyard.Ipfs.Core</PackageId>
        <Authors>IPFS Shipyard, Arlo Godfrey, Richard Schneider</Authors>
        <Title>IPFS Core Objects</Title>
        <Description>
      Backed by the IPFS Shipyard and developer community. Picking up where Richard Schneider / makaretu left off.
      Core objects and interfaces for IPFS.

      The InterPlanetary File System is the permanent web. IPFS enables the creation of completely distributed applications. It is a new hypermedia distribution protocol, addressed by content and identities. It aims to make the web faster, safer, and more open.
    </Description>
        <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
        <PackageTags>ipfs peer-to-peer distributed file-system</PackageTags>
        <IncludeSymbols>True</IncludeSymbols>
        <PackageProjectUrl>https://github.com/ipfs-shipyard/net-ipfs-core</PackageProjectUrl>
        <PackageIcon>icon.png</PackageIcon>

        <GeneratePackageOnBuild Condition=" '$(Configuration)' == 'Release' ">true</GeneratePackageOnBuild>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <PackageReleaseNotes>
--- 0.7.0 ---
[Breaking]
Fixed WebRTC-Direct support added in Kubo 0.30.0.
Removed the Object API completely, since Kubo replaced it with the DAG API and no longer offers it.
Refactored the FileSystem API to:
  - Enable proper directory uploads via a new `AddAsync` method that takes File and Folder parts separately.
  - Bring `FileAddOptions` fully up-to-date with modern Kubo.
  - Remove `AddDirectoryAsync` (used missing Object API).
Updated several types to use one of int, long or ulong for Size matching the Kubo API.

[New]
Added IFilestoreApi and the corresponding types.
Added a new type `DagCid` that can be used to automatically create IPLD link references when serialized.
Added the IBlockStat type, analogous to the BlockStat struct in Kubo.

--- 0.6.1 ---
[New]
Added missing MfsWriteOptions.Flush property. 

--- 0.6.0 ---
[Breaking]
Added missing IMfsApi.ReadFileStreamAsync method.

--- 0.5.0 ---
[Breaking]
Added missing Name property to IFileSystemNode. This property was already present in the Ipfs.Http.FileSystemNode class, and is used in the MfsApi to get the name of the node. This is a breaking change, but it is unlikely that anyone has implemented this interface in their own code. If you have, you will need to add the Name property to your implementation. 

--- 0.4.0 ---
[Breaking]
Added Mfs property to ICoreApi of type IMfsApi. The interface was added in a previous update, but it was not added to ICoreApi.

--- 0.3.0 ---
A full analysis of the Bitswap API was made to bring it in line with Kubo's RPC API.

[Breaking]
GetAsync and UnwantAsync were removed from IBitswapApi. These were not part of Kubo's API, but were intended for custom implementations. To migrate, derive IBitswapApi and add your custom functionality in your library. See also https://discord.com/channels/806902334369824788/942673321852563456/1225047628602151084.
The return type for IBlockApi.GetAsync was changed from IDataBlock to byte[], since IDataBlock was removed in 0.2.0. Kubo's RPC API (including the JS implementation) simply returns the buffer, and so are we now.
ILinkedNode was removed as it was not used anywhere in the broader net-ipfs codebase and seems to have been placed there years ago for future plans that were never carried out.

--- 0.2.0 ---
[Breaking]
IDataBlock.DataStream was removed. This pattern encouraged async calls behind synchronous property getters, which is a bad practice and can cause deadlocks. Call the async methods directly on the API instead.
The obsolete IFileSystemApi.ListFileAsync was removed due to prior deprecation and removal in Kubo 0.26.0. Use IFileSystemApi.ListAsync and MfsApi.StatAsync instead. See https://github.com/ipfs/kubo/issues/7493#issuecomment-2016563729.

[New]
Added missing IFileSystemApi.ListAsync. Doesn't fully replace the removed IFileSystemApi.ListFileAsync, but is a step in the right direction. See https://github.com/ipfs/kubo/issues/7493#issuecomment-2016563729.
        </PackageReleaseNotes>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
        <EmbedUntrackedSources>false</EmbedUntrackedSources>
        <!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb;$(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Google.Protobuf" Version="3.26.1" />
        <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="8.0.0" />
        <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
        <PackageReference Include="PolySharp" Version="1.14.1">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Portable.BouncyCastle" Version="1.8.5" />
        <PackageReference Include="SimpleBase" Version="1.3.1" />
        <PackageReference Include="Grpc.Tools" Version="2.62.0" PrivateAssets="All" />
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
    </ItemGroup>

    <ItemGroup>
        <Protobuf Include="**/*.proto" />
        <EmbeddedResource Include="**/*.proto" />
        <None Include="icon.png" Pack="true" PackagePath="\" />
    </ItemGroup>

</Project>
