<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PeerTalk</name>
    </assembly>
    <members>
        <member name="T:PeerTalk.BlackList`1">
            <summary>
              A sequence of targets that are not approved.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
            <remarks>
              Only targets that are not defined will pass.
            </remarks>
        </member>
        <member name="M:PeerTalk.BlackList`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.BlackList`1.IsNotAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.BlockExchange.Bitswap">
            <summary>
              Exchange blocks with other peers.
            </summary>
        </member>
        <member name="E:PeerTalk.BlockExchange.Bitswap.BlockNeeded">
            <summary>
              Raised when a blocked is needed.
            </summary>
            <remarks>
              Only raised when a block is first requested.
            </remarks>
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.PeerWants(Ipfs.MultiHash)">
            <summary>
              The blocks needed by the peer.
            </summary>
            <param name="peer">
              The unique ID of the peer.
            </param>
            <returns>
              The sequence of CIDs need by the <paramref name="peer"/>.
            </returns>
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.Want(Ipfs.Cid,Ipfs.MultiHash,System.Threading.CancellationToken)">
            <summary>
              Adds a block to the want list.
            </summary>
            <param name="id">
              The CID of the block to add to the want list.
            </param>
            <param name="peer">
              The unique ID of the peer that wants the block.  This is for
              information purposes only.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result is
              the contents of block.
            </returns>
            <remarks>
              Other peers are informed that the block is needed by this peer. Hopefully,
              someone will forward it to us.
              <para>
              Besides using <paramref name="cancel"/> for cancellation, the 
              <see cref="M:PeerTalk.BlockExchange.Bitswap.Unwant(Ipfs.Cid)"/> method will also cancel the operation.
              </para>
            </remarks>
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.Unwant(Ipfs.Cid)">
            <summary>
              Removes the block from the want list.
            </summary>
            <param name="id">
              The CID of the block to remove from the want list.
            </param>
            <remarks>
              Any tasks waiting for the block are cancelled.
              <para>
              No exception is thrown if the <paramref name="id"/> is not
              on the want list.
              </para>
            </remarks>
        </member>
        <member name="M:PeerTalk.BlockExchange.Bitswap.Found(Ipfs.IDataBlock)">
            <summary>
              Indicate that a block is found.
            </summary>
            <param name="block">
              The block that was found.
            </param>
            <returns>
              The number of consumers waiting for the <paramref name="block"/>.
            </returns>
            <remarks>
              <b>Found</b> should be called whenever a new block is discovered. 
              It will continue any Task that is waiting for the block and
              remove the block from the want list.
            </remarks>
        </member>
        <member name="T:PeerTalk.BlockExchange.CidEventArgs">
            <summary>
              The content addressable ID related to an event. 
            </summary>
            <see cref="T:Ipfs.Cid"/>
            <see cref="E:PeerTalk.BlockExchange.Bitswap.BlockNeeded"/>
        </member>
        <member name="P:PeerTalk.BlockExchange.CidEventArgs.Id">
            <summary>
              The content addressable ID. 
            </summary>
            <value>
              The unique ID of the block.
            </value>
        </member>
        <member name="T:PeerTalk.BlockExchange.WantedBlock">
            <summary>
              A content addressable block that is wanted by a peer.
            </summary>
        </member>
        <member name="F:PeerTalk.BlockExchange.WantedBlock.Id">
            <summary>
              The content ID of the block;
            </summary>
        </member>
        <member name="F:PeerTalk.BlockExchange.WantedBlock.Peers">
            <summary>
              The peers that want the block.
            </summary>
        </member>
        <member name="F:PeerTalk.BlockExchange.WantedBlock.Consumers">
            <summary>
              The consumers that are waiting for the block.
            </summary>
        </member>
        <member name="T:PeerTalk.Discovery.Bootstrap">
            <summary>
              Discovers the pre-configured peers.
            </summary>
        </member>
        <member name="E:PeerTalk.Discovery.Bootstrap.PeerDiscovered">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Discovery.Bootstrap.Addresses">
            <summary>
              The addresses of the pre-configured peers.
            </summary>
            <value>
              Each address must end with the ipfs protocol and the public ID
              of the peer.  For example "/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ"
            </value>
        </member>
        <member name="M:PeerTalk.Discovery.Bootstrap.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Discovery.Bootstrap.StopAsync">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Discovery.IPeerDiscovery">
            <summary>
              Describes a service that finds a peer.
            </summary>
            <remarks>
              All discovery services must raise the <see cref="E:PeerTalk.Discovery.IPeerDiscovery.PeerDiscovered"/> event.
            </remarks>
        </member>
        <member name="E:PeerTalk.Discovery.IPeerDiscovery.PeerDiscovered">
            <summary>
              Raised when a peer is discovered.
            </summary>
        </member>
        <member name="T:PeerTalk.Discovery.Mdns">
            <summary>
              Discovers peers using Multicast DNS.
            </summary>
        </member>
        <member name="E:PeerTalk.Discovery.Mdns.PeerDiscovered">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Discovery.Mdns.LocalPeer">
            <summary>
             The local peer.
            </summary>
        </member>
        <member name="P:PeerTalk.Discovery.Mdns.ServiceName">
            <summary>
              The service name for our peers.
            </summary>
            <value>
              Defaults to "_ipfs._upd".
            </value>
        </member>
        <member name="P:PeerTalk.Discovery.Mdns.Broadcast">
            <summary>
              Determines if the local peer responds to a query.
            </summary>
            <value>
              <b>true</b> to answer queries.  Defaults to <b>true</b>.
            </value>
        </member>
        <member name="M:PeerTalk.Discovery.Mdns.RefreshPeer">
            <summary>
              Refresh state because the peer has change.
            </summary>
            <remarks>
              Internal method to refresh the DNS-SD TXT record.
            </remarks>
        </member>
        <member name="M:PeerTalk.Discovery.Mdns.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Discovery.Mdns.StopAsync">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Discovery.PeerDiscoveredEventArgs">
            <summary>
              The event data.
            </summary>
        </member>
        <member name="P:PeerTalk.Discovery.PeerDiscoveredEventArgs.Address">
            <summary>
              The address of the peer that was discovered.
            </summary>
            <value>
              The address must end with the ipfs protocol and the public ID
              of the peer.  For example "/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ"
            </value>
        </member>
        <member name="T:PeerTalk.IPolicy`1">
            <summary>
              A rule that must be enforced.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
        </member>
        <member name="M:PeerTalk.IPolicy`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <summary>
              Determines if the target passes the rule.
            </summary>
            <param name="target">
              An object to test against the rule.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result is
              <b>true</b> if the <paramref name="target"/> passes the rule.
            </returns>
        </member>
        <member name="M:PeerTalk.IPolicy`1.IsNotAllowedAsync(`0,System.Threading.CancellationToken)">
            <summary>
              Determines if the target fails the rule.
            </summary>
            <param name="target">
              An object to test against the rule.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result is
              <b>true</b> if the <paramref name="target"/> fails the rule.
            </returns>
        </member>
        <member name="T:PeerTalk.IService">
            <summary>
              A service is async and can be started and stopped.
            </summary>
        </member>
        <member name="M:PeerTalk.IService.StartAsync">
            <summary>
              Start the service.
            </summary>
        </member>
        <member name="M:PeerTalk.IService.StopAsync">
            <summary>
              Stop the service.
            </summary>
        </member>
        <member name="T:PeerTalk.MultiAddressExtensions">
            <summary>
              Extensions to <see cref="T:Ipfs.MultiAddress"/>.
            </summary>
        </member>
        <member name="M:PeerTalk.MultiAddressExtensions.Clone(Ipfs.MultiAddress)">
            <summary>
              Creates a clone of the multiaddress.
            </summary>
            <param name="multiaddress">
              The mutiaddress to clone.
            </param>
            <returns>
              A new multiaddress with a copy of the <see cref="P:Ipfs.MultiAddress.Protocols"/>.
            </returns>
        </member>
        <member name="M:PeerTalk.MultiAddressExtensions.ResolveAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <summary>
              The IP addresses for a host name.
            </summary>
            <param name="multiaddress">
              The multiaddress to resolve.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is a sequence of possible multiaddresses.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">
              The host name cannot be resolved.
            </exception>
            <remarks>
              When the <see cref="P:Ipfs.NetworkProtocol.Name"/> starts with "dns", then a DNS
              lookup is performed to get all the IP addresses for the host name.  "dn4" and "dns6"
              will filter the result for IPv4 and IPV6 addresses.
              <para>
              When the <see cref="P:Ipfs.NetworkProtocol.Name"/> is "http" or "https", then
              a "tcp/80" or "tcp/443" is respectively added.
              </para>
            </remarks>
        </member>
        <member name="T:PeerTalk.Multiplex.Header">
            <summary>
              The header of a multiplex message.
            </summary>
            <remarks>
              The header of a multiplex message contains the <see cref="F:PeerTalk.Multiplex.Header.StreamId"/> and
              <see cref="F:PeerTalk.Multiplex.Header.PacketType"/> encoded as a <see cref="T:Ipfs.Varint">variable integer</see>.
            </remarks>
            <seealso href="https://github.com/libp2p/mplex"/>
        </member>
        <member name="F:PeerTalk.Multiplex.Header.MaxStreamId">
            <summary>
              The largest possible value of a <see cref="F:PeerTalk.Multiplex.Header.StreamId"/>.
            </summary>
            <value>
              long.MaxValue >> 3.
            </value>
        </member>
        <member name="F:PeerTalk.Multiplex.Header.MinStreamId">
            <summary>
              The smallest possible value of a <see cref="F:PeerTalk.Multiplex.Header.StreamId"/>.
            </summary>
            <value>
              Zero.
            </value>
        </member>
        <member name="F:PeerTalk.Multiplex.Header.StreamId">
            <summary>
              The stream identifier.
            </summary>
            <value>
              The session initiator allocates odd IDs and the session receiver allocates even IDs.
            </value>
        </member>
        <member name="F:PeerTalk.Multiplex.Header.PacketType">
            <summary>
              The purpose of the multiplex message.
            </summary>
            <value>
              One of the <see cref="F:PeerTalk.Multiplex.Header.PacketType"/> enumeration values.
            </value>
        </member>
        <member name="M:PeerTalk.Multiplex.Header.WriteAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Writes the header to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
              The destination <see cref="T:System.IO.Stream"/> for the header.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PeerTalk.Multiplex.Header.ReadAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Reads the header from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
              The source <see cref="T:System.IO.Stream"/> for the header.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation.  The task's result
              is the decoded <see cref="T:PeerTalk.Multiplex.Header"/>.
            </returns>
        </member>
        <member name="T:PeerTalk.Multiplex.Muxer">
            <summary>
              Supports multiple protocols over a single channel (stream).
            </summary>
        </member>
        <member name="P:PeerTalk.Multiplex.Muxer.NextStreamId">
            <summary>
              The next stream ID to create.
            </summary>
            <value>
              The session initiator allocates odd IDs and the session receiver allocates even IDs.
            </value>
        </member>
        <member name="P:PeerTalk.Multiplex.Muxer.Channel">
            <summary>
              The signle channel to exchange protocol messages.
            </summary>
            <value>
              A <see cref="T:System.IO.Stream"/> to exchange protocol messages.
            </value>
        </member>
        <member name="F:PeerTalk.Multiplex.Muxer.Substreams">
            <summary>
              The substreams that are open.
            </summary>
            <value>
              The key is stream ID and the value is a <see cref="T:PeerTalk.Multiplex.Substream"/>.
            </value>
        </member>
        <member name="P:PeerTalk.Multiplex.Muxer.Initiator">
            <summary>
              Determines if the muxer is the initiator.
            </summary>
            <value>
              <b>true</b> if the muxer is the initiator.
            </value>
            <seealso cref="P:PeerTalk.Multiplex.Muxer.Receiver"/>
        </member>
        <member name="P:PeerTalk.Multiplex.Muxer.Receiver">
            <summary>
              Determines if the muxer is the receiver.
            </summary>
            <value>
              <b>true</b> if the muxer is the receiver.
            </value>
            <seealso cref="P:PeerTalk.Multiplex.Muxer.Initiator"/>
        </member>
        <member name="M:PeerTalk.Multiplex.Muxer.CreateStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
              Creates a new stream with the specified name.
            </summary>
            <param name="name">
              A name for the stream.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>TODO</returns>
        </member>
        <member name="M:PeerTalk.Multiplex.Muxer.AcquireWriteAccessAsync">
            <summary>
              Acquire permission to write to the Channel.
            </summary>
            <returns>
              A task that represents the asynchronous get operation. The task's value
              is an <see cref="T:System.IDisposable"/> that releases the lock.
            </returns>
        </member>
        <member name="T:PeerTalk.Multiplex.PacketType">
            <summary>
              The purpose of the multiplex message.
            </summary>
            <seealso cref="T:PeerTalk.Multiplex.Header"/>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.NewStream">
            <summary>
              Create a new stream.
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.MessageReceiver">
            <summary>
              A message from the "receiver".
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.MessageInitiator">
            <summary>
              A message from the "initiator".
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.CloseReceiver">
            <summary>
              Close the stream from the "receiver".
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.CloseInitiator">
            <summary>
              Close the stream from the "initiator".
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.ResetReceiver">
            <summary>
              Reset the stream from the "receiver".
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.PacketType.ResetInitiator">
            <summary>
              Reset the stream from the "initiator".
            </summary>
        </member>
        <member name="T:PeerTalk.Multiplex.Substream">
            <summary>
              A substream used by the <see cref="P:PeerTalk.Multiplex.Substream.Muxer"/>.
            </summary>
        </member>
        <member name="F:PeerTalk.Multiplex.Substream.Id">
            <summary>
              The stream identifier.
            </summary>
            <value>
              The session initiator allocates odd IDs and the session receiver allocates even IDs.
            </value>
        </member>
        <member name="F:PeerTalk.Multiplex.Substream.Name">
            <summary>
              A name for the stream.
            </summary>
            <value>
              Names do not need to be unique.
            </value>
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.Muxer">
            <summary>
              The multiplexor associated with the substream.
            </summary>
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.Length">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Multiplex.Substream.Position">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.SetMessage(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.Flush">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Multiplex.Substream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.PeerConnection">
            <summary>
              A connection between two peers.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.LocalPeer">
            <summary>
              The local peer.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.RemotePeer">
            <summary>
              The remote peer.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.LocalAddress">
            <summary>
              The local peer's end point.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.RemoteAddress">
            <summary>
              The remote peer's end point.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.Stream">
            <summary>
              The duplex stream between the two peers.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.SecurityEstablished">
            <summary>
              Signals that the security for the connection is established.
            </summary>
            <remarks>
              This can be awaited.
            </remarks>
        </member>
        <member name="P:PeerTalk.PeerConnection.LastUsed">
            <summary>
              When the connection was last used.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.BytesRead">
            <summary>
              Number of bytes read over the connection.
            </summary>
        </member>
        <member name="P:PeerTalk.PeerConnection.BytesWritten">
            <summary>
              Number of bytes written over the connection.
            </summary>
        </member>
        <member name="M:PeerTalk.PeerConnection.InitiateAsync(System.Threading.CancellationToken)">
            <summary>
             Establish the connection with the remote node.
            </summary>
            <param name="cancel"></param>
            <returns></returns>
            <remarks>
              This should be called when the local peer wants a connection with
              the remote peer.
            </remarks>
        </member>
        <member name="M:PeerTalk.PeerConnection.RespondAsync(System.Threading.CancellationToken)">
            <summary>
              Accept a connection from the remote peer.
            </summary>
            <param name="cancel"></param>
            <returns></returns>
            <remarks>
              This should be called when a remote peer is connecting to the
              local peer.
            </remarks>
        </member>
        <member name="M:PeerTalk.PeerConnection.Dispose(System.Boolean)">
            <summary>
             TODO
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PeerTalk.PeerConnection.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:PeerTalk.Policy`1">
            <summary>
              A base for defining a policy.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
        </member>
        <member name="M:PeerTalk.Policy`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Policy`1.IsNotAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.PolicyAlways`1">
            <summary>
              A rule that always passes.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
        </member>
        <member name="M:PeerTalk.PolicyAlways`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.PolicyNever`1">
            <summary>
              A rule that always fails.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
        </member>
        <member name="M:PeerTalk.PolicyNever`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Protocols.Identify1">
            <summary>
              Identifies the peer.
            </summary>
        </member>
        <member name="P:PeerTalk.Protocols.Identify1.Name">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Protocols.Identify1.Version">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Identify1.ToString">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Identify1.ProcessRequestAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Identify1.ProcessResponseAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Protocols.IPeerProtocol">
            <summary>
              Defines the messages that can be exchanged between two peers.
            </summary>
            <remarks>
              <see cref="M:System.Object.ToString"/> must return a string in the form
              "/name/version".
            </remarks>
        </member>
        <member name="P:PeerTalk.Protocols.IPeerProtocol.Name">
            <summary>
              The name of the protocol.
            </summary>
        </member>
        <member name="P:PeerTalk.Protocols.IPeerProtocol.Version">
            <summary>
              The version of the protocol.
            </summary>
        </member>
        <member name="M:PeerTalk.Protocols.IPeerProtocol.ProcessRequestAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <summary>
              Process a request for the protocol.
            </summary>
            <param name="connection">
              A connection to the peer.
            </param>
            <param name="cancel">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PeerTalk.Protocols.IPeerProtocol.ProcessResponseAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <summary>
              Process a response from the protocol.
            </summary>
            <param name="connection">
              A connection to the peer.
            </param>
            <param name="cancel">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:PeerTalk.Protocols.Message">
            <summary>
              A message that is exchanged between peers.
            </summary>
            <remarks>
              A message consists of
              <list type="bullet">
                 <item><description>A <see cref="T:Ipfs.Varint"/> length prefix</description></item>
                 <item><description>The payload</description></item>
                 <item><description>A terminating newline</description></item>
              </list>
            </remarks>
        </member>
        <member name="M:PeerTalk.Protocols.Message.ReadBytesAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Read the message as a sequence of bytes from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> to a peer.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is the byte representation of the message's payload.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
              When the message is invalid.
            </exception>
        </member>
        <member name="M:PeerTalk.Protocols.Message.ReadStringAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Read the message as a <see cref="T:System.String"/> from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> to a peer.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is the string representation of the message's payload.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
              When the message is invalid.
            </exception>
            <remarks>
              The return value has the length prefix and terminating newline removed.
            </remarks>
        </member>
        <member name="M:PeerTalk.Protocols.Message.WriteAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
              Writes the binary representation of the message to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="message">
              The message to write.  A newline is automatically appended.
            </param>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> to a peer.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:PeerTalk.Protocols.Mplex67">
            <summary>
               A Stream Multiplexer protocol.
            </summary>
            <seealso href="https://github.com/libp2p/mplex"/>
        </member>
        <member name="P:PeerTalk.Protocols.Mplex67.Name">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Protocols.Mplex67.Version">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Mplex67.ToString">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Mplex67.ProcessRequestAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Mplex67.ProcessResponseAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Protocols.Multistream1">
            <summary>
              A protocol to select other protocols.
            </summary>
            <seealso href="https://github.com/multiformats/multistream-select"/>
        </member>
        <member name="P:PeerTalk.Protocols.Multistream1.Name">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Protocols.Multistream1.Version">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Multistream1.ToString">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Multistream1.ProcessRequestAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Multistream1.ProcessResponseAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Protocols.Plaintext1">
            <summary>
              TODO
            </summary>
        </member>
        <member name="P:PeerTalk.Protocols.Plaintext1.Name">
            <inheritdoc />
        </member>
        <member name="P:PeerTalk.Protocols.Plaintext1.Version">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Plaintext1.ToString">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Plaintext1.ProcessRequestAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.Plaintext1.ProcessResponseAsync(PeerTalk.PeerConnection,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Protocols.ProtocolRegistry">
            <summary>
              Metadata on <see cref="T:PeerTalk.Protocols.IPeerProtocol"/>.
            </summary>
        </member>
        <member name="F:PeerTalk.Protocols.ProtocolRegistry.Protocols">
            <summary>
              All the peer protocols.
            </summary>
            <remarks>
              The key is the name and version of the peer protocol, like "/multiselect/1.0.0".
              The value is a Func that returns an new instance of the peer protocol.
            </remarks>
        </member>
        <member name="M:PeerTalk.Protocols.ProtocolRegistry.Register``1">
            <summary>
              Register a new protocol.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PeerTalk.Protocols.ProtocolRegistry.Deregister(System.String)">
            <summary>
              TODO
            </summary>
            <param name="protocolName"></param>
        </member>
        <member name="T:PeerTalk.Protocols.VersionedName">
            <summary>
              A name with a semantic version.
            </summary>
            <remarks>
              Implements value type equality.
            </remarks>
        </member>
        <member name="P:PeerTalk.Protocols.VersionedName.Name">
            <summary>
              The name.
            </summary>
        </member>
        <member name="P:PeerTalk.Protocols.VersionedName.Version">
            <summary>
              The semantic version.
            </summary>
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.ToString">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.Parse(System.String)">
            <summary>
              Parse
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.Equals(PeerTalk.Protocols.VersionedName)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.op_Equality(PeerTalk.Protocols.VersionedName,PeerTalk.Protocols.VersionedName)">
            <summary>
              Value equality.
            </summary>
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.op_Inequality(PeerTalk.Protocols.VersionedName,PeerTalk.Protocols.VersionedName)">
            <summary>
              Value inequality.
            </summary>
        </member>
        <member name="M:PeerTalk.Protocols.VersionedName.CompareTo(PeerTalk.Protocols.VersionedName)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.StatsStream">
            <summary>
              A simple wrapper around another stream that records statistics.
            </summary>
        </member>
        <member name="T:PeerTalk.Swarm">
            <summary>
              Manages communication with other peers.
            </summary>
        </member>
        <member name="E:PeerTalk.Swarm.ListenerEstablished">
            <summary>
              Raised when a listener is establihed.
            </summary>
            <remarks>
              Raised when <see cref="M:PeerTalk.Swarm.StartListeningAsync(Ipfs.MultiAddress)"/>
              succeeds.
            </remarks>
        </member>
        <member name="P:PeerTalk.Swarm.LocalPeer">
            <summary>
             The local peer.
            </summary>
        </member>
        <member name="F:PeerTalk.Swarm.otherPeers">
            <summary>
              Other nodes. Key is the bae58 hash of the peer ID.
            </summary>
        </member>
        <member name="F:PeerTalk.Swarm.connections">
            <summary>
              The connections to other peers. Key is the base58 hash of the peer ID.
            </summary>
        </member>
        <member name="F:PeerTalk.Swarm.listeners">
            <summary>
              Cancellation tokens for the listeners.
            </summary>
        </member>
        <member name="P:PeerTalk.Swarm.KnownPeerAddresses">
            <summary>
              Get the sequence of all known peer addresses.
            </summary>
            <value>
              Contains any peer address that has been
              <see cref="M:PeerTalk.Swarm.RegisterPeerAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">discovered</see>.
            </value>
            <seealso cref="M:PeerTalk.Swarm.RegisterPeerAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)"/>
        </member>
        <member name="P:PeerTalk.Swarm.KnownPeers">
            <summary>
              Get the sequence of all known peers.
            </summary>
            <value>
              Contains any peer that has been
              <see cref="M:PeerTalk.Swarm.RegisterPeerAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">discovered</see>.
            </value>
            <seealso cref="M:PeerTalk.Swarm.RegisterPeerAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:PeerTalk.Swarm.RegisterPeerAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <summary>
              Register that a peer's address has been discovered.
            </summary>
            <param name="address">
              An address to the peer. 
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is the <see cref="T:Ipfs.Peer"/> that is registered.
            </returns>
            <exception cref="T:System.Exception">
              The <see cref="P:PeerTalk.Swarm.BlackList"/> or <see cref="P:PeerTalk.Swarm.WhiteList"/> policies forbid it.
              Or the "ipfs" protocol name is missing.
            </exception>
            <remarks>
              If the <paramref name="address"/> is not already known, then it is
              added to the <see cref="P:PeerTalk.Swarm.KnownPeerAddresses"/>.
            </remarks>
        </member>
        <member name="P:PeerTalk.Swarm.BlackList">
            <summary>
              The addresses that cannot be used.
            </summary>
        </member>
        <member name="P:PeerTalk.Swarm.WhiteList">
            <summary>
              The addresses that can be used.
            </summary>
        </member>
        <member name="M:PeerTalk.Swarm.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Swarm.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Swarm.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <summary>
              Connect to a peer.
            </summary>
            <param name="address">
              An ipfs <see cref="T:Ipfs.MultiAddress"/>, such as
             <c>/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ</c>.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is the connected <see cref="T:Ipfs.Peer"/>.
            </returns>
            <remarks>
              If already connected to the peer, on any address, then nothing is done.
            </remarks>
        </member>
        <member name="M:PeerTalk.Swarm.Dial(Ipfs.Peer,System.Collections.Generic.List{Ipfs.MultiAddress},System.Threading.CancellationToken)">
            <summary>
              Establish a duplex stream between the local and remote peer.
            </summary>
            <param name="remote"></param>
            <param name="addrs"></param>
            <param name="cancel"></param>
            <returns></returns>
        </member>
        <member name="M:PeerTalk.Swarm.DisconnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <summary>
              Disconnect from a peer.
            </summary>
            <param name="address">
              An ipfs <see cref="T:Ipfs.MultiAddress"/>, such as
             <c>/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ</c>.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, the <see cref="T:System.Threading.Tasks.TaskCanceledException"/> is raised.
            </param>
            <returns>
              A task that represents the asynchronous operation.
            </returns>
            <remarks>
              If the peer is not conected, then nothing happens.
            </remarks>
        </member>
        <member name="M:PeerTalk.Swarm.StartListeningAsync(Ipfs.MultiAddress)">
            <summary>
              Start listening on the specified <see cref="T:Ipfs.MultiAddress"/>.
            </summary>
            <param name="address">
              Typically "/ip4/0.0.0.0/tcp/4001" or "/ip6/::/tcp/4001".
            </param>
            <returns>
              A task that represents the asynchronous operation.  The task's result
              is a <see cref="T:Ipfs.MultiAddress"/> than can be used by another peer
              to connect to tis peer.
            </returns>
            <exception cref="T:System.Exception">
              Already listening on <paramref name="address"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="address"/> is missing a transport protocol (such as tcp or udp).
            </exception>
            <remarks>
              Allows other peers to <see cref="M:PeerTalk.Swarm.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">connect</see>
              to the <paramref name="address"/>.
              <para>
              The <see cref="P:Ipfs.Peer.Addresses"/> of the <see cref="P:PeerTalk.Swarm.LocalPeer"/> are updated.  If the <paramref name="address"/> refers to
              any IP address ("/ip4/0.0.0.0" or "/ip6/::") then all network interfaces addresses
              are added.  If the port is zero (as in "/ip6/::/tcp/0"), then the peer addresses contains the actual port number
              that was assigned.
              </para>
            </remarks>
        </member>
        <member name="M:PeerTalk.Swarm.OnRemoteConnect(System.IO.Stream,Ipfs.MultiAddress,Ipfs.MultiAddress)">
            <summary>
              Called when a remote peer is connecting to the local peer.
            </summary>
            <param name="stream">
              The stream to the remote peer.
            </param>
            <param name="local">
              The local peer's address.
            </param>
            <param name="remote">
              The remote peer's address.
            </param>
            <remarks>
              Establishes the protocols of the connection.
              <para>
              If any error is encountered, then the connection is closed.
              </para>
            </remarks>
        </member>
        <member name="M:PeerTalk.Swarm.StopListeningAsync(Ipfs.MultiAddress)">
            <summary>
              Stop listening on the specified <see cref="T:Ipfs.MultiAddress"/>.
            </summary>
            <param name="address"></param>
            <returns>
              A task that represents the asynchronous operation.
            </returns>
            <remarks>
              Allows other peers to <see cref="M:PeerTalk.Swarm.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">connect</see>
              to the <paramref name="address"/>.
              <para>
              The addresses of the <see cref="P:PeerTalk.Swarm.LocalPeer"/> are updated.
              </para>
            </remarks>
        </member>
        <member name="M:PeerTalk.Swarm.IsAllowedAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Swarm.IsNotAllowedAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Transports.IPeerTransport">
            <summary>
              Establishes a duplex stream between two peers
              over a specific network transport.
            </summary>
        </member>
        <member name="M:PeerTalk.Transports.IPeerTransport.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <summary>
              Connect to a peer.
            </summary>
            <param name="address">
              The address of the peer.
            </param>
            <param name="cancel">
              Is used to stop the task.  When cancelled, a <b>null</b> is returned.
            </param>
            <returns>
              A task that represents the asynchronous operation. The task's result
              is a duplex <see cref="T:System.IO.Stream"/> or <b>null</b>.
            </returns>
        </member>
        <member name="M:PeerTalk.Transports.IPeerTransport.Listen(Ipfs.MultiAddress,System.Action{System.IO.Stream,Ipfs.MultiAddress,Ipfs.MultiAddress},System.Threading.CancellationToken)">
            <summary>
              Listen to any peer connections on the specified address.
            </summary>
            <param name="address">
              The address to listen on.
            </param>
            <param name="handler">
              The action to perform when a peer connection is received.
            </param>
            <param name="cancel">
              Is used to stop the connection listener.  When cancelled, the <see cref="T:System.OperationCanceledException"/>
              is <b>NOT</b> raised.
            </param>
            <returns>
              The actual address of the listener.
            </returns>
            <remarks>
              The <paramref name="handler"/> is invoked on the peer listener thread. If
              it throws, then the connection is closed but the listener remains
              active.  It is passed a duplex stream, the local address and the remote
              address.
              <para>
              To stop listening, the <paramref name="cancel"/> parameter 
              must be supplied and then use the <see cref="M:System.Threading.CancellationTokenSource.Cancel"/>
              method.
              </para>
              <para>
              For socket based transports (tcp or upd), if the port is not defined 
              or is zero an ephermal port is assigned.
              </para>
            </remarks>
        </member>
        <member name="T:PeerTalk.Transports.Tcp">
            <summary>
              Establishes a duplex stream between two peers
              over TCP.
            </summary>
            <remarks>
              <see cref="M:PeerTalk.Transports.Tcp.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)"/> determines the network latency and sets the timeout
              to 3 times the latency or <see cref="F:PeerTalk.Transports.Tcp.MinReadTimeout"/>.
            </remarks>
        </member>
        <member name="F:PeerTalk.Transports.Tcp.MinReadTimeout">
            <summary>
             The minimum read timeout.
            </summary>
            <value>
              Defaults to 3 seconds.
            </value>
        </member>
        <member name="M:PeerTalk.Transports.Tcp.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Transports.Tcp.Listen(Ipfs.MultiAddress,System.Action{System.IO.Stream,Ipfs.MultiAddress,Ipfs.MultiAddress},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.Transports.Udp">
            <summary>
              Establishes a duplex stream between two peers
              over UDP.
            </summary>
        </member>
        <member name="M:PeerTalk.Transports.Udp.ConnectAsync(Ipfs.MultiAddress,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.Transports.Udp.Listen(Ipfs.MultiAddress,System.Action{System.IO.Stream,Ipfs.MultiAddress,Ipfs.MultiAddress},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PeerTalk.WhiteList`1">
            <summary>
              A sequence of targets that are approved.
            </summary>
            <typeparam name="T">
              The type of object that the rule applies to.
            </typeparam>
            <remarks>
              Only targets that are defined will pass.  If no targets are defined, then anything
              passes.
            </remarks>
        </member>
        <member name="M:PeerTalk.WhiteList`1.IsAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PeerTalk.WhiteList`1.IsNotAllowedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
